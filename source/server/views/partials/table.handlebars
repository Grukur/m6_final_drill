
{{!-- Formulario para la creacion de registros en anime --}}
<h1 class="my-2 text-center">App de anime kwaii</h1>

<section id="form" class="d-none">
    <div class="w-75 mx-auto">
        <h2 class="text-center">Formulario de creación de usuarios.</h2>
        <form id="formCreateUser">
            <label for="createNombre" class="form-label">Nombre</label>
            <input values="" type="text" name="createNombre" id="createNombre" class="form-control" required>
            <label for="createGenero" class="form-label">Genereo</label>
            <input values="" type="text" name="createGenero" id="createGenero" class="form-control" required>
            <label for="createAño" class="form-label">Año</label>
            <input values="" type="text" name="createAño" id="createAño" class="form-control" required>
            <label for="createAutor" class="form-label">Autor</label>
            <input values="" type="text" name="createAutor" id="createAutor" class="form-control" required>
            <input id="createForm" type="submit" value="Crear" class="btn btn-primary my-2 d-block">
            <input id="updateform" type="submit" value="Actualizar" class="btn btn-warning my-2 d-block">
        </form>
    </div>
</section>

<div class="text-center">
    <button type="submit" id="formShow" class="btn btn-primary my-2 d-block m-auto">Crear</button>
</div>

<section>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Index</th>
                <th scope="col">Nombre</th>
                <th scope="col">Genero</th>
                <th scope="col">año</th>
                <th scope="col">Autor</th>
                <th scope="col">Actualizar</th>
                <th scope="col">Eliminar</th>
            </tr>
        </thead>
        <tbody>
            {{#each data}}
            <tr>
                <th scope="row">{{this.id}}</th>
                <td>{{this.nombre}}</td>
                <td>{{this.genero}}</td>
                <td>{{this.año}}</td>
                <td>{{this.autor}}</td>
                <td><a class="btn btn-warning updateBtn">Actualizar</a></td>
                <td><button class="btn btn-danger deleteBtn">Eliminar</button></td>
            </tr>
            {{/each}}
        </tbody>
    </table>
</section>

<script>
    const updateBtn = document.querySelectorAll(".updateBtn");
    const deleteBtn = document.querySelectorAll(".deleteBtn");

    //Muestra el formulario y oculta botones
    formShow.addEventListener('click', ()=>{
        form.classList.replace("d-none", "d-block");
        formShow.classList.replace("d-block", "d-none");
        updateform.classList.replace("d-block", "d-none");
        createForm.classList.replace("d-none", "d-block");
        formCreateUser.reset()

    })
    
    // capturamos todos los botones actualizar y capturamos la data de su fila
    for (let i = 0; i < updateBtn.length; i++) {
        updateBtn[i].addEventListener("click", (event) => {

            form.classList.replace("d-none", "d-block");
            createForm.classList.replace("d-block", "d-none");
            updateform.classList.replace("d-none", "d-block");
            formShow.classList.replace("d-none", "d-block");
            

            let path = event.srcElement.offsetParent.nextSibling.parentElement.cells
            
            createNombre.value = path[1].innerText;
            createGenero.value = path[2].innerText;
            createAño.value = path[3].innerText;
            createAutor.value = path[4].innerText;
        });
    }
    
    //capturamos el evento submit del formualrio para agregar y modificar
    let formCreateUser = document.getElementById('formCreateUser')
    formCreateUser.addEventListener("submit", async (event) => {
        event.preventDefault();
        console.log('Capturando Formulario');
        try {
            const raw = JSON.stringify({
                "nombre":createNombre.value,
                "genero":createGenero.value,
                "año":createAño.value,
                "autor":createAutor.value
            })

            const myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/json");

            let response = await fetch("/animes", {
                method: "POST",
                headers: myHeaders,
                body: raw,
                redirect: 'follow'
            });

            let data = await response.json();
            if (data.code == 201) {
                alert("Usuario creado con éxito.")
                formCreateUser.reset();
                location.reload();
            } else {
                throw new Error("Error al guardar los datos en la BD.")
            }
        } catch (error) {
            alert(error.message)
        }
    })

    // capturamos todos los botones eliminar y eliminamos el valor correspondiente
    for (let i = 0; i < deleteBtn.length; i++) {
        deleteBtn[i].addEventListener("click", (event) => {        

            let path = event.srcElement.offsetParent.nextSibling.parentElement.cells
            
            let id = path[0].innerText;

            var requestOptions = {
                method: 'DELETE',
                redirect: 'follow'
            };

            fetch("http://localhost:3000/animes/"+id, requestOptions)
                .then(response => response.json())
                .then(result => console.log(result))
                .catch(error => console.log('error', error));
            location.reload();


        });
    }


</script>